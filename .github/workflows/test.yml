name: "Run Tests"

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write
  pull-requests: write
  issues: write
  statuses: write

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Go with cache
        uses: jfrog/.github/actions/install-go-with-cache@main

      - name: Install dependencies
        run: make deps

      - name: Install test reporting tools
        run: |
          go install github.com/gotestyourself/gotestsum@latest
          go install github.com/jstemmer/go-junit-report/v2@latest
          go install github.com/axw/gocov/gocov@latest
          go install github.com/AlekSi/gocov-xml@latest

      - name: Run unit tests with detailed output
        id: test
        run: |
          mkdir -p test-results coverage
          
          # Run tests with gotestsum for better output and JUnit XML generation
          gotestsum --junitfile test-results/junit.xml \
                    --format testname \
                    --jsonfile test-results/test.json \
                    -- \
                    -short \
                    -v \
                    -race \
                    -coverprofile=coverage/coverage.out \
                    -covermode=atomic \
                    -timeout 10m \
                    ./evidence/... 2>&1 | tee test-results/test-output.txt
          
          # Capture test exit code
          TEST_EXIT_CODE=${PIPESTATUS[0]}
          echo "test_exit_code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT
          
          # Generate additional coverage formats
          gocov convert coverage/coverage.out > coverage/coverage.json
          gocov-xml < coverage/coverage.json > coverage/coverage.xml
          
          # Generate coverage summary
          go tool cover -func=coverage/coverage.out > coverage/coverage-summary.txt
          
          # Extract coverage percentage
          COVERAGE=$(go tool cover -func=coverage/coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          
          # Count test statistics
          if [ -f test-results/test.json ]; then
            TOTAL=$(cat test-results/test.json | jq -s 'map(select(.Action == "pass" or .Action == "fail" or .Action == "skip")) | length')
            PASSED=$(cat test-results/test.json | jq -s 'map(select(.Action == "pass")) | length')
            FAILED=$(cat test-results/test.json | jq -s 'map(select(.Action == "fail")) | length')
            SKIPPED=$(cat test-results/test.json | jq -s 'map(select(.Action == "skip")) | length')
            
            echo "total_tests=$TOTAL" >> $GITHUB_OUTPUT
            echo "passed_tests=$PASSED" >> $GITHUB_OUTPUT
            echo "failed_tests=$FAILED" >> $GITHUB_OUTPUT
            echo "skipped_tests=$SKIPPED" >> $GITHUB_OUTPUT
          fi
          
          exit $TEST_EXIT_CODE
        continue-on-error: true

      - name: Generate HTML coverage report
        if: always()
        run: |
          go tool cover -html=coverage/coverage.out -o coverage/coverage.html

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-results/
            coverage/
          retention-days: 30

      - name: Test Report Summary
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: 'Unit Test Results'
          path: 'test-results/junit.xml'
          reporter: java-junit
          fail-on-error: false
          fail-on-empty: false

      - name: Create test summary
        if: always()
        run: |
          echo "## Test Results Summary 📊" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test statistics
          echo "### Test Statistics" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Total Tests | ${{ steps.test.outputs.total_tests || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ✅ Passed | ${{ steps.test.outputs.passed_tests || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ❌ Failed | ${{ steps.test.outputs.failed_tests || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ⏭️ Skipped | ${{ steps.test.outputs.skipped_tests || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Coverage information
          echo "### Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "| Type | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Total Coverage | ${{ steps.test.outputs.coverage }}% |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Coverage by package
          if [ -f coverage/coverage-summary.txt ]; then
            echo "### Coverage by Package" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat coverage/coverage-summary.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          
          # Test status
          if [ "${{ steps.test.outputs.test_exit_code }}" = "0" ]; then
            echo "### ✅ All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Some tests failed. Please check the test report for details." >> $GITHUB_STEP_SUMMARY
            
            # Show failed test details if available
            if [ -f test-results/test.json ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "#### Failed Tests:" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              cat test-results/test.json | jq -r 'select(.Action == "fail") | "\(.Package)/\(.Test // .TestName // "unknown"): \(.Output // "No output")"' | head -20 >> $GITHUB_STEP_SUMMARY || true
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Comment PR with test results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Read test results
            const coverage = '${{ steps.test.outputs.coverage }}' || 'N/A';
            const totalTests = '${{ steps.test.outputs.total_tests }}' || '0';
            const passedTests = '${{ steps.test.outputs.passed_tests }}' || '0';
            const failedTests = '${{ steps.test.outputs.failed_tests }}' || '0';
            const skippedTests = '${{ steps.test.outputs.skipped_tests }}' || '0';
            const testExitCode = '${{ steps.test.outputs.test_exit_code }}';
            
            // Determine status emoji and message
            const statusEmoji = testExitCode === '0' ? '✅' : '❌';
            const statusMessage = testExitCode === '0' ? 'All tests passed!' : 'Some tests failed';
            
            // Coverage badge color
            const coverageFloat = parseFloat(coverage);
            let coverageBadgeColor = 'red';
            if (coverageFloat >= 80) coverageBadgeColor = 'green';
            else if (coverageFloat >= 60) coverageBadgeColor = 'yellow';
            else if (coverageFloat >= 40) coverageBadgeColor = 'orange';
            
            // Create comment body - using array join to avoid YAML parsing issues
            const commentLines = [
              `## ${statusEmoji} Test Results for ${context.sha.substring(0, 7)}`,
              '',
              '### 📊 Summary',
              `- **Status:** ${statusMessage}`,
              `- **Coverage:** ![Coverage](https://img.shields.io/badge/coverage-${coverage}%25-${coverageBadgeColor})`,
              `- **Duration:** [View in Actions](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`,
              '',
              '### 📈 Test Statistics',
              '| Metric | Count | Percentage |',
              '|--------|-------|------------|',
              `| Total | ${totalTests} | 100% |`,
              `| ✅ Passed | ${passedTests} | ${totalTests > 0 ? ((passedTests/totalTests)*100).toFixed(1) : 0}% |`,
              `| ❌ Failed | ${failedTests} | ${totalTests > 0 ? ((failedTests/totalTests)*100).toFixed(1) : 0}% |`,
              `| ⏭️ Skipped | ${skippedTests} | ${totalTests > 0 ? ((skippedTests/totalTests)*100).toFixed(1) : 0}% |`,
              '',
              '### 📁 Artifacts',
              `- 📊 [Test Results](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`,
              `- 📈 [Coverage Report](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`,
              '',
              '---',
              '<details>',
              '<summary>View Test Output</summary>',
              '',
              '```',
              'Check the Actions tab for detailed test output',
              '```',
              '',
              '</details>'
            ];
            
            const commentBody = commentLines.join('\n');
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Test Results for')
            );
            
            // Update or create comment
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

      - name: Fail if tests failed
        if: steps.test.outputs.test_exit_code != '0'
        run: |
          echo "Tests failed with exit code: ${{ steps.test.outputs.test_exit_code }}"
          exit 1